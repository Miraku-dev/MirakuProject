from asyncio.windows_events import CONNECT_PIPE_MAX_DELAY
import logging
import asyncio
import config

from keyboards import greet_kb, markuplist, product_beast, more, \
    upload_button, keyboardcontacts, keyboardlocation
from config import MY_ID, API_TOKEN
from utils import Location, available_answers_data
from pics import sucks_1, hat_1, t_shirt_1, t_shirt_2, \
    shoes_1, hoody_1, lingerie_1, pendant_1, dress_1, \
        top_1, hat_frog_cat, jeans_1, chain

from aiogram.utils.emoji import emojize
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types.message import ContentType, ContentTypes
from aiogram.utils.markdown import text, bold, italic, code, pre
from aiogram.types import ParseMode, ChatActions, InputMediaPhoto, reply_keyboard
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher import FSMContext
import aiogram.utils.markdown as fmt

bot = Bot(token=config.API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

async def process_start_command(message: types.Message):
    await message.answer(fmt.text("–ü—Ä–∏–≤–µ—Ç,", fmt.hbold(message.from_user.username), "\n–Ø –ì—Ä–∏–≥–æ—Ä–∏–π - –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ–±–ª–µ–≥—á–∏—Ç —Ä–∞–±–æ—Ç—É —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∑–∞–∫–∞–∑–æ–≤."),
    reply_markup=greet_kb, parse_mode=types.ParseMode.HTML)

async def process_hi(message: types.Message):
    await message.answer('–ü–æ–∫–∞ —á—Ç–æ —ç—Ç–æ –≤—Å—ë, —á—Ç–æ —è —É–º–µ—é.', reply_markup=markuplist)

async def product_list(message: types.Message):
    await message.answer('–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã –∏ –∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞.', reply_markup=product_beast)

async def more_beast(message: types.Message):
    await message.answer('–í–æ—Ç –Ω–∞ —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –µ—â—ë –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å...', reply_markup=more)

async def help(message: types.Message):
	await message.answer('–í–æ—Ç, —á—Ç–æ —è —É–º–µ—é', reply_markup=markuplist)

async def process_hat_1(message: types.Message):
    caption = '–ü—Ä–æ—Å—Ç–µ–Ω—å–∫–∞—è —à–ª—è–ø–∫–∞. \n –¶–µ–Ω–∞: 500—Ä.'
    caption_1 = '–ú–æ–¥–Ω–∞—è —à–ª—è–ø–∫–∞.\n –¶–µ–Ω–∞: 7500p.'
    await bot.send_photo(message.from_user.id, hat_1,
                        caption=emojize(caption),
                         reply_to_message_id=message.message_id)
    await bot.send_photo(message.from_user.id, hat_frog_cat,
                        caption=emojize(caption_1),
                         reply_to_message_id=message.message_id)

async def location_date(message: types.Message):
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–∏ –§–ò–û, —Ç–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å –∏ –∏–Ω–¥–µ–∫—Å, –∞ —Ç–∞–∫–∂–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∏–∂–µ.',
    reply_markup=types.ReplyKeyboardRemove())
    await Location.wait_location.set()

async def location(message: types.Message, state: FSMContext):
    await state.update_data(data_locat=message.text.lower())
    await message.answer('–£–±–µ–¥–∏—Ç–µ—Å—å –≤ —Ç–æ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –≤–µ—Ä–Ω–æ.', reply_markup=upload_button)
    await Location.next()

async def localcation(message: types.Message, state: FSMContext):
    if message.text.lower() not in available_answers_data:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.")
        return
    user_data = await state.get_data()
    await bot.send_message(MY_ID, fmt.text(f"–ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n@", fmt.hbold(message.from_user.username),
    f"\n–ü–æ–ª—É—á–µ–Ω–æ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n{user_data['data_locat']}"), parse_mode=types.ParseMode.HTML)
    await message.answer('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã.')
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è', reply_markup=keyboardcontacts)
    await state.finish()

async def send_contact(message: types.Message):
    await bot.forward_message(MY_ID, message.chat.id, message.message_id)
    await message.answer('–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é, –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏', reply_markup=keyboardlocation)

async def send_location(message: types.Message):
    await bot.forward_message(MY_ID, message.chat.id, message.message_id)
    await message.answer('–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É. –°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑!', reply_markup=types.ReplyKeyboardRemove())
    await message.answer('–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, –º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å —É –Ω–∞—Å —á—Ç–æ-–Ω–∏–±—É–¥—å –µ—â—ë.', reply_markup=markuplist)


async def cmd_cancel(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=types.ReplyKeyboardRemove())
    await message.answer('–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:', reply_markup=markuplist)

async def chat_id(message):
    my_chat_id = int(message.chat.id)
    await bot.send_messag(MY_ID, my_chat_id)

def register_handlers_update(dp: Dispatcher):
    dp.register_message_handler(process_start_command, commands='start', state='*')
    dp.register_message_handler(process_hi, text='–ü—Ä–∏–≤–µ—Ç! ' + emojize(':wave:'), state='*')
    dp.register_message_handler(product_list, text='–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ ' + emojize('üîç'), state='*')
    dp.register_message_handler(more_beast, text='–ï—â—ë...', state='*')
    dp.register_message_handler(help, commands=['help'], state='*')
    dp.register_message_handler(process_hat_1, text='–ì–æ–ª–æ–≤–Ω—ã–µ —É–±–æ—Ä—ã üé©', state='*')
    dp.register_message_handler(chat_id, commands=['id'], state='*')
    dp.register_message_handler(cmd_cancel, text='–û—Ç–º–µ–Ω–∞', state='*')
    dp.register_message_handler(location_date, text='–ö—É–ø–∏—Ç—å', state='*')
    dp.register_message_handler(location_date, text='–ù–µ—Ç, –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤–≤–æ–¥—É –¥–∞–Ω–Ω—ã—Ö', state='*')
    dp.register_message_handler(location, state=Location.wait_location)
    dp.register_message_handler(localcation, state=Location.await_location)
    dp.register_message_handler(send_contact, content_types=ContentType.CONTACT, state='*')
    dp.register_message_handler(send_location, content_types=ContentType.LOCATION, state='*')

async def no_command(message: types.Message):
	await message.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –∑–Ω–∞—é –∫–∞–∫ –Ω–∞ —ç—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å. –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å - –ø–∏—à–∏—Ç–µ /help')

def register_handlers_poop(dp: Dispatcher):
    dp.register_message_handler(no_command, content_types=ContentType.ANY, state='*')

async def main():
    logging.basicConfig(format=u'%(filename)s [ LINE:%(lineno)+3s ]#%(levelname)+8s [%(asctime)s]  %(message)s',
                    level=logging.INFO)

    bot = Bot(token=config.API_TOKEN)
    dp = Dispatcher(bot, storage=MemoryStorage())

    dp.middleware.setup(LoggingMiddleware())

    register_handlers_update(dp)

    register_handlers_poop(dp)

    await dp.start_polling()

print("Great. Bot start success.")

if __name__ == '__main__':
    asyncio.run(main())